name: CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master

jobs:
  test-backend:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/dev-requirements.txt') }}
    - name: Install dependencies
      run: |
        sudo apt-get install libpq-dev  # required b/c it has pg_config which is needed to build psycopg2
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev-requirements.txt
    - name: Test with pytest
      env:
        SLACK_API_TOKEN: ""
        DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"
        DJANGO_SETTINGS_MODULE: "penny_university.settings.ci"
        SECRET_KEY: "6db7242adc5570c3bb2d12b2e161b1930650f9669a457fb3"
      run: |
        pytest
    - name: Flake8
      run: |
        flake8

  test-frontend:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '10' ]
    steps:
    - uses: actions/checkout@v1
    - name: Set Up Node ${{ matrix.node }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node }}
    # TODO add dependency caching here
    - name: Install Dependencies
      working-directory: ./penny_university_frontend
      run: |
          npm install
    - name: Run Tests
      working-directory: ./penny_university_frontend
      run: |
        CI=true npm test

  deploy:
    needs: ["test-backend", "test-frontend"]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        if: github.event_name == 'push'
      - name: Add Heroku credentials
        if: github.event_name == 'push'
        run: |
          echo "machine api.heroku.com" > ~/.netrc
          echo "  login penny.university.mod@gmail.com" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
          echo "machine git.heroku.com" >> ~/.netrc
          echo "  login penny.university.mod@gmail.com" >> ~/.netrc
          echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc
      - name: Backup DB
        if: github.event_name == 'push'
        run: |
          echo "NOTE: this isn't going to work once the db gets too large, but while we can take advantage of this extra safety, why not?"
          heroku pg:backups:capture -a penny-university || ./script/message_to_slack "${{ secrets.SLACK_API_KEY }}" "DEPLOY FAILED" 1
      - name: Push
        if: github.event_name == 'push'
        run: |
          echo "NOTE: if this suddenly breaks, it might be because of an expired API key"
          git remote add heroku https://git.heroku.com/penny-university.git  || ./script/message_to_slack "${{ secrets.SLACK_API_KEY }}" "DEPLOY FAILED" 1
          git push heroku HEAD:master -f  || ./script/message_to_slack "${{ secrets.SLACK_API_KEY }}" "DEPLOY FAILED" 1
          ./script/message_to_slack "${{ secrets.SLACK_API_KEY }}" "SUCCESSFUL DEPLOY"